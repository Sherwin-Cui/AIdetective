<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>指证对决系统</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Microsoft YaHei', sans-serif;
            background: #1a1a1a;
            color: #fff;
            height: 100vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* 与游戏风格一致的样式 */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .confrontation-container {
            width: 100%;
            height: 100%;
            background: #2a2a2a;
            display: flex;
            flex-direction: column;
            position: relative;
        }

        /* 顶部标题栏 */
        .confrontation-header {
            background: linear-gradient(to bottom, #3a2a1a, #2a1a0a);
            border-bottom: 3px solid #d4a574;
            padding: 15px 20px;
            text-align: center;
            position: relative;
        }

        .confrontation-title {
            color: #ffd700;
            font-size: 28px;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
            margin-bottom: 10px;
        }

        .pressure-bar {
            background: #1a1a1a;
            border: 2px solid #666;
            border-radius: 15px;
            height: 25px;
            width: 300px;
            margin: 0 auto;
            position: relative;
            overflow: hidden;
        }

        .pressure-fill {
            height: 100%;
            width: 30%;
            background: linear-gradient(to right, #44ff44, #66ff66);
            transition: all 0.3s ease;
            position: relative;
        }

        .pressure-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 12px;
            color: #fff;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
            z-index: 1;
        }

        /* 对话显示区域 */
        .dialogue-display-area {
            flex: 1;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: radial-gradient(ellipse at center, #3a3a3a 0%, #2a2a2a 100%);
            position: relative;
            overflow: hidden;
        }

        /* 对话框样式 */
        .dialogue-box {
            max-width: 800px;
            width: 100%;
            background: rgba(0, 0, 0, 0.8);
            border: 2px solid #d4a574;
            border-radius: 10px;
            padding: 20px;
            position: relative;
            display: none;
            animation: dialogueFadeIn 0.3s ease-out;
            box-shadow: 0 5px 20px rgba(0,0,0,0.5);
        }

        .dialogue-box.active {
            display: block;
        }

        @keyframes dialogueFadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* 头像样式 */
        .speaker-avatar {
            position: absolute;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            border: 3px solid #d4a574;
            overflow: hidden;
            background: #333;
            box-shadow: 0 4px 10px rgba(0,0,0,0.5);
        }

        .speaker-avatar.user {
            right: -30px;
            top: 50%;
            transform: translateY(-50%);
        }

        .speaker-avatar.npc {
            left: -30px;
            top: 50%;
            transform: translateY(-50%);
        }

        .speaker-avatar.speaking {
            animation: avatarPulse 0.6s ease-in-out;
        }

        @keyframes avatarPulse {
            0%, 100% { transform: translateY(-50%) scale(1); }
            50% { transform: translateY(-50%) scale(1.1); }
        }

        .speaker-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .speaker-name {
            color: #d4a574;
            font-weight: bold;
            margin-bottom: 10px;
            font-size: 18px;
        }

        .dialogue-content {
            font-size: 16px;
            line-height: 1.6;
            color: #fff;
            min-height: 60px;
        }

        .evidence-tag {
            display: inline-block;
            background: #d4a574;
            color: #1a1a1a;
            padding: 2px 8px;
            border-radius: 4px;
            margin-left: 8px;
            font-size: 14px;
            font-weight: bold;
        }

        /* 证据栏 */
        .evidence-section {
            background: #1a1a1a;
            border-top: 2px solid #666;
            border-bottom: 2px solid #666;
            padding: 15px 20px;
        }

        .evidence-header {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-bottom: 10px;
        }

        .evidence-label {
            color: #d4a574;
            font-weight: bold;
            font-size: 16px;
        }

        .evidence-list {
            display: flex;
            gap: 10px;
            overflow-x: auto;
            padding: 5px 0;
        }

        .evidence-item {
            background: #333;
            border: 2px solid #666;
            border-radius: 5px;
            padding: 8px 15px;
            cursor: pointer;
            transition: all 0.2s ease;
            white-space: nowrap;
            font-size: 14px;
            user-select: none;
        }

        .evidence-item:hover {
            background: #444;
            border-color: #d4a574;
            transform: translateY(-2px);
        }

        .evidence-item.selected {
            background: #d4a574;
            color: #1a1a1a;
            border-color: #ffd700;
            font-weight: bold;
        }

        /* 输入区域 */
        .input-section {
            background: #2a2a2a;
            border-top: 2px solid #666;
            padding: 20px;
        }

        .input-container {
            display: flex;
            gap: 10px;
            align-items: center;
            max-width: 1000px;
            margin: 0 auto;
        }

        .dialogue-input {
            flex: 1;
            background: #1a1a1a;
            border: 2px solid #666;
            border-radius: 5px;
            padding: 12px 15px;
            color: #fff;
            font-size: 16px;
            transition: all 0.2s ease;
        }

        .dialogue-input:focus {
            outline: none;
            border-color: #d4a574;
            background: #2a2a2a;
        }

        /* 按钮样式 - 与游戏风格一致 */
        .action-btn {
            background: #d4a574;
            color: #1a1a1a;
            border: none;
            border-radius: 5px;
            padding: 12px 20px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            white-space: nowrap;
        }

        .action-btn:hover {
            background: #e4b584;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }

        .action-btn:active {
            transform: translateY(0);
        }

        .action-btn.attach-evidence {
            background: #666;
            color: #fff;
        }

        .action-btn.attach-evidence:hover {
            background: #777;
        }

        .action-btn.end-confrontation {
            background: #cc3333;
            color: #fff;
        }

        .action-btn.end-confrontation:hover {
            background: #dd4444;
        }

        /* Toast提示 - 复用游戏样式 */
        .game-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #333;
            color: #fff;
            padding: 15px 20px;
            border-radius: 5px;
            border: 2px solid #666;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            z-index: 2000;
            animation: toastSlideIn 0.3s ease-out;
        }

        .game-toast.toast-success {
            border-color: #44ff44;
        }

        .game-toast.toast-error {
            border-color: #ff4444;
        }

        .game-toast.toast-warning {
            border-color: #ffaa44;
        }

        @keyframes toastSlideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* 打字机效果 */
        .typing::after {
            content: '▊';
            display: inline-block;
            animation: blink 0.7s infinite;
            color: #d4a574;
            margin-left: 2px;
        }

        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }

        /* 结束对决按钮位置 */
        .bottom-controls {
            position: absolute;
            bottom: 20px;
            right: 20px;
        }

        /* 滚动条样式 */
        .evidence-list::-webkit-scrollbar {
            height: 6px;
        }

        .evidence-list::-webkit-scrollbar-track {
            background: #1a1a1a;
        }

        .evidence-list::-webkit-scrollbar-thumb {
            background: #666;
            border-radius: 3px;
        }

        .evidence-list::-webkit-scrollbar-thumb:hover {
            background: #888;
        }
    </style>
</head>
<body>
    <div class="modal-overlay" id="confrontationModal">
        <div class="confrontation-container">
            <!-- 顶部标题栏 -->
            <div class="confrontation-header">
                <h1 class="confrontation-title">指认对决</h1>
                <div class="pressure-bar">
                    <div class="pressure-fill" id="pressureFill"></div>
                    <div class="pressure-text" id="pressureText">压力等级：低</div>
                </div>
            </div>

            <!-- 对话显示区域 -->
            <div class="dialogue-display-area">
                <!-- 用户对话框 -->
                <div class="dialogue-box" id="userDialogue">
                    <div class="speaker-avatar user" id="userAvatar">
                        <img src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234a9eff'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='30' font-weight='bold'%3E侦探%3C/text%3E%3C/svg%3E" alt="侦探">
                    </div>
                    <div class="speaker-name">侦探</div>
                    <div class="dialogue-content" id="userContent"></div>
                </div>

                <!-- NPC对话框 -->
                <div class="dialogue-box" id="npcDialogue">
                    <div class="speaker-avatar npc" id="npcAvatar">
                        <img src="" alt="NPC" id="npcAvatarImg">
                    </div>
                    <div class="speaker-name" id="npcName">嫌疑人</div>
                    <div class="dialogue-content" id="npcContent"></div>
                </div>
            </div>

            <!-- 证据栏 -->
            <div class="evidence-section">
                <div class="evidence-header">
                    <span class="evidence-label">可用证据：</span>
                </div>
                <div class="evidence-list" id="evidenceList">
                    <!-- 证据将由JavaScript动态生成 -->
                </div>
            </div>

            <!-- 输入区域 -->
            <div class="input-section">
                <div class="input-container">
                    <input type="text" class="dialogue-input" id="dialogueInput" placeholder="输入你的质问...">
                    <button class="action-btn attach-evidence" id="attachEvidenceBtn">附加证据</button>
                    <button class="action-btn" id="sendBtn">发送</button>
                </div>
            </div>

            <!-- 底部控制按钮 -->
            <div class="bottom-controls">
                <button class="action-btn end-confrontation" id="endConfrontationBtn">结束对决</button>
            </div>
        </div>
    </div>

    <script>
        // 对决系统类
        class ConfrontationSystem {
            constructor() {
                this.currentNpc = null;
                this.selectedEvidence = null;
                this.isTyping = false;
                this.pressure = 30;
                this.dialogueHistory = [];
                this.npcResponses = {};
                
                this.init();
            }

            init() {
                // 初始化事件监听器
                this.initEventListeners();
                // 加载证据
                this.loadEvidence();
            }

            initEventListeners() {
                // 发送按钮
                document.getElementById('sendBtn').addEventListener('click', () => this.sendMessage());
                
                // 回车发送
                document.getElementById('dialogueInput').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !this.isTyping) {
                        this.sendMessage();
                    }
                });

                // 附加证据按钮
                document.getElementById('attachEvidenceBtn').addEventListener('click', () => {
                    if (this.selectedEvidence) {
                        const input = document.getElementById('dialogueInput');
                        input.value += ` [将出示：${this.selectedEvidence.name}]`;
                        input.focus();
                    } else {
                        this.showToast('请先选择一个证据', 2000, 'warning');
                    }
                });

                // 结束对决按钮
                document.getElementById('endConfrontationBtn').addEventListener('click', () => {
                    this.showConfirmDialog('确定要结束这场对决吗？', () => {
                        this.endConfrontation();
                    });
                });

                // 点击空白处关闭菜单
                document.addEventListener('click', () => {
                    // 这里可以添加关闭操作菜单的逻辑
                });
            }

            // 开始对决
            startConfrontation(npcId) {
                this.currentNpc = this.getNpcData(npcId);
                if (!this.currentNpc) return;

                // 设置NPC头像和名称
                document.getElementById('npcAvatarImg').src = this.currentNpc.avatar;
                document.getElementById('npcName').textContent = this.currentNpc.name;

                // 重置状态
                this.pressure = 30;
                this.updatePressure();
                this.dialogueHistory = [];
                this.selectedEvidence = null;

                // 显示对决界面
                document.getElementById('confrontationModal').style.display = 'flex';

                // 显示开场对话
                setTimeout(() => {
                    this.showDialogue('npc', this.currentNpc.openingStatement || '我没什么好说的。');
                }, 500);
            }

            // 加载证据
            loadEvidence() {
                const evidenceList = document.getElementById('evidenceList');
                evidenceList.innerHTML = '';

                // 从游戏状态获取已收集的线索
                const clues = this.getCollectedClues();
                
                clues.forEach(clue => {
                    const item = document.createElement('div');
                    item.className = 'evidence-item';
                    item.textContent = clue.name;
                    item.dataset.clueId = clue.id;
                    
                    item.addEventListener('click', () => {
                        // 取消其他选中
                        document.querySelectorAll('.evidence-item').forEach(e => {
                            e.classList.remove('selected');
                        });
                        
                        // 选中当前证据
                        item.classList.add('selected');
                        this.selectedEvidence = clue;
                    });
                    
                    evidenceList.appendChild(item);
                });
            }

            // 发送消息
            sendMessage() {
                if (this.isTyping) return;

                const input = document.getElementById('dialogueInput');
                const text = input.value.trim();
                
                if (!text) return;

                // 清理输入框
                input.value = '';

                // 显示用户对话
                let displayText = text;
                let evidence = null;
                
                // 检查是否有附加证据
                const evidenceMatch = text.match(/\[将出示：(.+?)\]/);
                if (evidenceMatch) {
                    evidence = evidenceMatch[1];
                    displayText = text.replace(evidenceMatch[0], '').trim();
                }

                this.showDialogue('user', displayText, evidence || (this.selectedEvidence ? this.selectedEvidence.name : null));

                // 更新压力值
                this.updatePressure(evidence || this.selectedEvidence ? 10 : 5);

                // 清除选中的证据
                this.selectedEvidence = null;
                document.querySelectorAll('.evidence-item').forEach(e => {
                    e.classList.remove('selected');
                });

                // 生成NPC回应
                setTimeout(() => {
                    const response = this.generateNpcResponse(displayText, evidence);
                    this.showDialogue('npc', response);
                }, 1500);
            }

            // 显示对话
            showDialogue(speaker, text, evidence = null) {
                // 隐藏所有对话框
                document.querySelectorAll('.dialogue-box').forEach(box => {
                    box.classList.remove('active');
                });

                const dialogueBox = speaker === 'user' ? 
                    document.getElementById('userDialogue') : 
                    document.getElementById('npcDialogue');
                const contentElement = speaker === 'user' ? 
                    document.getElementById('userContent') : 
                    document.getElementById('npcContent');
                const avatar = speaker === 'user' ? 
                    document.getElementById('userAvatar') : 
                    document.getElementById('npcAvatar');

                // 显示对话框
                dialogueBox.classList.add('active');

                // 头像动画
                avatar.classList.add('speaking');
                setTimeout(() => avatar.classList.remove('speaking'), 600);

                // 构建完整文本
                let fullText = text;
                if (evidence) {
                    fullText += `<span class="evidence-tag">【${evidence}】</span>`;
                }

                // 打字机效果
                this.typewriterEffect(contentElement, text, () => {
                    if (evidence) {
                        contentElement.innerHTML += ` <span class="evidence-tag">【${evidence}】</span>`;
                    }
                });

                // 添加到历史
                this.dialogueHistory.push({
                    speaker,
                    text,
                    evidence,
                    timestamp: Date.now()
                });
            }

            // 打字机效果
            typewriterEffect(element, text, callback) {
                this.isTyping = true;
                element.innerHTML = '';
                element.classList.add('typing');
                
                let i = 0;
                const speed = 50;
                
                const type = () => {
                    if (i < text.length) {
                        if (text.charAt(i) === '\n') {
                            element.innerHTML += '<br>';
                        } else {
                            element.innerHTML += text.charAt(i);
                        }
                        i++;
                        setTimeout(type, speed);
                    } else {
                        element.classList.remove('typing');
                        this.isTyping = false;
                        if (callback) callback();
                    }
                };
                
                type();
            }

            // 生成NPC回应
            generateNpcResponse(userText, evidence) {
                // 这里应该接入AI系统来生成智能回应
                // 暂时使用预设回应
                const responses = [
                    "我不知道你在说什么。",
                    "这个证据说明不了什么！",
                    "你没有证据证明这一点！",
                    "那又怎样？这能说明什么？",
                    "我...我需要想想...",
                    "你在胡说八道！",
                    "这不可能！一定是搞错了！"
                ];

                if (evidence) {
                    return `关于这个${evidence}...我...我不记得了！`;
                }

                return responses[Math.floor(Math.random() * responses.length)];
            }

            // 更新压力值
            updatePressure(increment = 0) {
                this.pressure = Math.min(100, Math.max(0, this.pressure + increment));
                
                const fill = document.getElementById('pressureFill');
                const text = document.getElementById('pressureText');
                
                fill.style.width = this.pressure + '%';
                
                if (this.pressure < 40) {
                    text.textContent = '压力等级：低';
                    fill.style.background = 'linear-gradient(to right, #44ff44, #66ff66)';
                } else if (this.pressure < 70) {
                    text.textContent = '压力等级：中';
                    fill.style.background = 'linear-gradient(to right, #ffaa44, #ffcc66)';
                } else {
                    text.textContent = '压力等级：高';
                    fill.style.background = 'linear-gradient(to right, #ff4444, #ff6666)';
                }

                // 高压力时可能触发特殊事件
                if (this.pressure >= 90) {
                    this.showToast('嫌疑人即将崩溃！', 3000, 'warning');
                }
            }

            // 结束对决
            endConfrontation() {
                this.showToast('对决结束，正在整理线索...', 3000, 'success');
                
                // 保存对决结果
                this.saveConfrontationResult();
                
                // 关闭界面
                setTimeout(() => {
                    document.getElementById('confrontationModal').style.display = 'none';
                }, 1000);
            }

            // 显示提示
            showToast(message, duration = 3000, type = 'info') {
                const toast = document.createElement('div');
                toast.className = `game-toast toast-${type}`;
                toast.textContent = message;
                
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    toast.remove();
                }, duration);
            }

            // 显示确认对话框
            showConfirmDialog(message, onConfirm) {
                if (confirm(message)) {
                    onConfirm();
                }
            }

            // 模拟方法 - 实际应该从游戏系统获取
            getNpcData(npcId) {
                return {
                    id: npcId,
                    name: '陈雅琴',
                    avatar: 'path/to/avatar.jpg',
                    openingStatement: '我有充分的证据证明我就是杀害林山庄的凶手。陈雅琴，你必须给我一个合理的解释！'
                };
            }

            getCollectedClues() {
                return [
                    { id: 'clue1', name: '杀害山庄的布局图' },
                    { id: 'clue2', name: '陈雅琴的证词' },
                    { id: 'clue3', name: '凶器' },
                    { id: 'clue4', name: '监控录像' },
                    { id: 'clue5', name: '指纹报告' }
                ];
            }

            saveConfrontationResult() {
                // 保存对决结果到游戏状态
                console.log('保存对决结果', {
                    npc: this.currentNpc.id,
                    pressure: this.pressure,
                    dialogueCount: this.dialogueHistory.length
                });
            }
        }

        // 创建全局实例
        const confrontationSystem = new ConfrontationSystem();

        // 模拟开始对决
        setTimeout(() => {
            confrontationSystem.startConfrontation('chen_yaqin');
        }, 1000);
    </script>
</body>
</html>