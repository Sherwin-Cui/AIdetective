基于你提供的理想Prompt结构，我来设计一个具体的重构方案：

## 重构方案

### 1. 修改 `aiConfig.js` - 添加结构化的角色配置

```javascript
// 在 CharacterPersonalities 中为每个角色添加新的结构
export const CharacterPersonalities = {
    'chen_yaqin': {
        // 保留原有的基础信息
        name: '陈雅琴',
        age: 45,
        identity: '死者妻子',
        // ... 其他原有字段

        // 新增：结构化的角色扮演配置
        roleplayConfig: {
            // 核心秘密（AI知道但不会主动透露）
            coreSecrets: [
                '你在丈夫的酒中下了与他心脏药物相克的毒药',
                '你知道丈夫准备修改遗嘱，将财产捐给慈善机构',
                '你与管家计划杀死丈夫后私奔',
                '晚餐前你去过酒窖，在丈夫常喝的那瓶酒中下毒'
            ],
            
            // 情绪触发机制（更详细的配置）
            emotionTriggers: {
                '与丈夫关系': { emotion: '悲伤', behavior: '表现得很伤心，强调恩爱' },
                '晚餐前行踪': { emotion: '紧张', behavior: '略微停顿，说在厨房帮忙' },
                '去过酒窖': { emotion: '防备', behavior: '否认，但会不自然地解释' },
                '遗产问题': { emotion: '愤怒', behavior: '生气地表示不在乎钱' },
                '与管家关系': { emotion: '慌乱', behavior: '极力否认，过度解释' }
            },
            
            // 线索触发详细配置
            clueTriggers: [
                {
                    id: 'clue_chen_cellar',
                    name: '证词矛盾-酒窖',
                    triggerCondition: '连续追问晚餐前的具体行踪（3次以上）',
                    revealInfo: '我...我可能去拿了瓶酒，但那是为晚宴准备的！',
                    judgmentRule: '当承认去过酒窖或拿过酒时触发'
                },
                {
                    id: 'clue_chen_will',
                    name: '紧张反应-遗嘱',
                    triggerCondition: '直接提到"遗嘱"或"财产分配"',
                    revealInfo: '表现异常激动，说漏嘴提到慈善捐赠',
                    judgmentRule: '当提到慈善、捐赠或遗嘱修改时触发'
                }
                // ... 其他线索
            ],
            
            // 其他已知信息
            otherKnowledge: [
                '知道丈夫有心脏病，需要定期服药',
                '知道儿子林晨欠债，但装作不知情',
                '对医生李医生印象一般，认为他收费太高',
                '表面上与所有人关系和睦'
            ],
            
            // 行为准则
            behaviorGuidelines: [
                '初期表现得悲伤但镇定',
                '被逼问时逐渐露出破绽',
                '绝不主动承认罪行',
                '可以撒谎，但要记住自己说过的谎言'
            ]
        }
    }
    // ... 其他角色类似配置
};
```

### 2. 修改 `DialogueAI.js` - 重构提示词构建方法

```javascript
// 完全重写 buildEnhancedPrompt 方法
buildEnhancedPrompt(userMessage, potentialClues) {
    const character = CharacterPersonalities[this.currentNPC];
    if (!character) {
        console.warn(`⚠️ 找不到角色 ${this.currentNPC} 的配置`);
        return userMessage;
    }
    
    // 构建结构化的提示词
    const prompt = `你是一个中文角色扮演游戏中的NPC。这是一个侦探推理游戏。

游戏背景：
深秋雨夜，山庄主人林山庄在生日晚宴上突然死亡，疑似中毒。由于道路中断，侦探需要在天亮前查明真相。

重要规则：
1. 必须用中文回复，不要使用英文或emoji
2. 保持严肃的悬疑氛围，符合角色设定
3. 只知道角色设定中的信息，不能透露其他角色的秘密
4. 当被问到敏感问题时，根据你的性格表现出相应的情绪反应
5. 只有在特定条件下才能透露关键信息
6. 保持角色的一致性，不要突然改变态度
7. 回答简洁，每次不超过100字
8. 严格按照下面的格式回复

必须的回复格式：
[情绪状态]（如：平静、紧张、愤怒、悲伤等）
正文内容
<clue_check>
{
    "triggered": true或false,
    "clue_id": "线索ID或null",
    "reason": "触发原因"
}
</clue_check>

游戏时间线：
- 19:00 客人陆续到达
- 20:00 晚宴开始
- 20:30 林山庄致辞后倒下身亡
- 20:45 当前时间（调查开始）

## 角色设定
你是${character.name}，${character.age}岁，${character.identity}。${character.personality}

## 核心秘密
${character.roleplayConfig.coreSecrets.map(secret => `- ${secret}`).join('\n')}

## 情绪触发机制
${Object.entries(character.roleplayConfig.emotionTriggers).map(([trigger, config]) => 
    `- 被问到${trigger}时：[${config.emotion}] ${config.behavior}`
).join('\n')}

## 线索触发条件
${character.roleplayConfig.clueTriggers.map((clue, index) => `
${index + 1}. 【${clue.name}】
触发：${clue.triggerCondition}
透露："${clue.revealInfo}"
线索ID：${clue.id}
判定条件：${clue.judgmentRule}
`).join('\n')}

## 其他信息
${character.roleplayConfig.otherKnowledge.map(info => `- ${info}`).join('\n')}

## 注意事项
${character.roleplayConfig.behaviorGuidelines.map(guideline => `- ${guideline}`).join('\n')}

当前对话轮数：${this.dialogueHistory.length + 1}/${this.getMaxDialogueCount(this.currentNPC)}
已获得线索：${this.getRevealedCluesString()}

当前对话对象：${character.name}

对话历史：
${this.formatHistory(this.dialogueHistory, character.name)}

特殊上下文：
${this.buildSpecialContext(potentialClues)}

请根据上述角色设定扮演${character.name}。记住：
1. 保持角色性格的一致性
2. 根据用户的提问方式调整情绪状态
3. 在适当的时机触发线索reveal
4. 每次回复须包含[情绪状态]标签
5. 回复控制在100字以内
6. 回复后须添加线索判定结果

用户提问：${userMessage}`;

    return prompt;
},

// 新增辅助方法
getRevealedCluesString() {
    const revealedClues = AIClueManager.getRevealedClues();
    if (revealedClues.length === 0) return '无';
    return revealedClues.map(clue => clue.name).join('、');
},

buildSpecialContext(potentialClues) {
    const contexts = [];
    
    // 根据已获得的线索添加上下文提示
    if (AIClueManager.hasClue('clue_maid_witness')) {
        contexts.push('注意：玩家可能从小美那里知道了你去酒窖的事');
    }
    
    if (AIClueManager.hasClue('clue_butler_confirm_cellar')) {
        contexts.push('注意：玩家已经从管家那里得到了确认');
    }
    
    // 根据对话次数添加提示
    const dialogueCount = this.dialogueHistory.length;
    if (dialogueCount > 15) {
        contexts.push('注意：对话次数较多，可以逐渐露出更多破绽');
    }
    
    return contexts.length > 0 ? contexts.join('\n') : '无特殊上下文';
},

// 修改响应解析方法
async sendMessage() {
    // ... 前面的代码保持不变 ...
    
    if (aiResponse) {
        // 解析新格式的响应
        const clueCheckMatch = aiResponse.match(/<clue_check>([\s\S]*?)<\/clue_check>/);
        let clueCheckData = null;
        let cleanResponse = aiResponse;
        
        if (clueCheckMatch) {
            cleanResponse = aiResponse.replace(/<clue_check>[\s\S]*?<\/clue_check>/, '').trim();
            try {
                clueCheckData = JSON.parse(clueCheckMatch[1]);
                console.log('🎯 线索检查结果:', clueCheckData);
            } catch (e) {
                console.error('解析线索检查数据失败:', e);
            }
        }
        
        const parsed = responseParser.parseResponse(cleanResponse, this.currentNPC);
        
        // 显示NPC的回复
        await this.addDialogueBubbleWithTyping('npc', parsed.content, parsed.emotion);
        
        // 处理线索触发
        if (clueCheckData && clueCheckData.triggered && clueCheckData.clue_id) {
            if (AIClueManager.canTriggerClue(clueCheckData.clue_id)) {
                console.log(`📌 线索触发: ${clueCheckData.clue_id} - ${clueCheckData.reason}`);
                
                setTimeout(() => {
                    // 显示线索发现提示
                    const clueInfo = this.getClueInfoById(clueCheckData.clue_id);
                    this.addDialogueBubble('system', `[发现线索：${clueInfo.name}]`);
                    this.handleClueReveal(clueCheckData.clue_id);
                }, 1000);
            }
        }
        
        // ... 后续代码 ...
    }
}
```

### 3. 新增工具方法

```javascript
// 在 DialogueAI 中添加
getClueInfoById(clueId) {
    // 先从 ClueTriggerRules 查找
    for (const [npcId, rules] of Object.entries(ClueTriggerRules)) {
        const rule = rules.find(r => r.id === clueId);
        if (rule) return rule;
    }
    
    // 再从 ClueData 查找
    return ClueData[clueId] || { name: clueId };
},

getMaxDialogueCount(npcId) {
    const npc = window.AIMiddleware.NpcData[npcId];
    return npc?.dialogueMax || 20;
}
```

### 4. 修改响应解析器 `ResponseParser.js`

```javascript
// 更新解析逻辑以支持新格式
export const responseParser = {
    parseResponse(response, npcId) {
        // 提取情绪（支持中文方括号）
        const emotionMatch = response.match(/^[\[【](.*?)[\]】]/);
        const emotion = emotionMatch ? emotionMatch[1] : '平静';
        
        // 提取内容（移除情绪标签）
        const content = response.replace(/^[\[【].*?[\]】]\s*/, '').trim();
        
        return {
            emotion: emotion,
            content: content,
            originalResponse: response
        };
    }
};
```

## 实施步骤

1. **第一步**：更新 `aiConfig.js`，为每个角色添加 `roleplayConfig` 配置
2. **第二步**：重写 `DialogueAI.js` 中的 `buildEnhancedPrompt` 方法
3. **第三步**：修改 `sendMessage` 方法中的响应解析逻辑
4. **第四步**：添加必要的辅助方法
5. **第五步**：测试每个角色的对话，确保新格式正常工作

这个方案的优势：
- 提示词结构更清晰，AI更容易理解和遵循
- 线索触发机制更明确，使用JSON格式便于解析
- 保持了原有的灵活性，同时提高了准确性
- 更容易调试和维护